#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Classes
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AplicacionWeb")]
	public partial class TablesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAfiliado(Afiliado instance);
    partial void UpdateAfiliado(Afiliado instance);
    partial void DeleteAfiliado(Afiliado instance);
    partial void InsertUsuario(Usuario instance);
    partial void UpdateUsuario(Usuario instance);
    partial void DeleteUsuario(Usuario instance);
    partial void InsertAño(Año instance);
    partial void UpdateAño(Año instance);
    partial void DeleteAño(Año instance);
    partial void InsertDia(Dia instance);
    partial void UpdateDia(Dia instance);
    partial void DeleteDia(Dia instance);
    partial void InsertDisponibilidadMedico(DisponibilidadMedico instance);
    partial void UpdateDisponibilidadMedico(DisponibilidadMedico instance);
    partial void DeleteDisponibilidadMedico(DisponibilidadMedico instance);
    partial void InsertEspecialidad(Especialidad instance);
    partial void UpdateEspecialidad(Especialidad instance);
    partial void DeleteEspecialidad(Especialidad instance);
    partial void InsertFechaTurno(FechaTurno instance);
    partial void UpdateFechaTurno(FechaTurno instance);
    partial void DeleteFechaTurno(FechaTurno instance);
    partial void InsertHorario(Horario instance);
    partial void UpdateHorario(Horario instance);
    partial void DeleteHorario(Horario instance);
    partial void InsertLocalidad(Localidad instance);
    partial void UpdateLocalidad(Localidad instance);
    partial void DeleteLocalidad(Localidad instance);
    partial void InsertMedico(Medico instance);
    partial void UpdateMedico(Medico instance);
    partial void DeleteMedico(Medico instance);
    partial void InsertMedicoSucursal(MedicoSucursal instance);
    partial void UpdateMedicoSucursal(MedicoSucursal instance);
    partial void DeleteMedicoSucursal(MedicoSucursal instance);
    partial void InsertMes(Mes instance);
    partial void UpdateMes(Mes instance);
    partial void DeleteMes(Mes instance);
    partial void InsertNuevaContraseña(NuevaContraseña instance);
    partial void UpdateNuevaContraseña(NuevaContraseña instance);
    partial void DeleteNuevaContraseña(NuevaContraseña instance);
    partial void InsertObraSocial(ObraSocial instance);
    partial void UpdateObraSocial(ObraSocial instance);
    partial void DeleteObraSocial(ObraSocial instance);
    partial void InsertPerfil(Perfil instance);
    partial void UpdatePerfil(Perfil instance);
    partial void DeletePerfil(Perfil instance);
    partial void InsertPlanObraSocial(PlanObraSocial instance);
    partial void UpdatePlanObraSocial(PlanObraSocial instance);
    partial void DeletePlanObraSocial(PlanObraSocial instance);
    partial void InsertProvincia(Provincia instance);
    partial void UpdateProvincia(Provincia instance);
    partial void DeleteProvincia(Provincia instance);
    partial void InsertSucursal(Sucursal instance);
    partial void UpdateSucursal(Sucursal instance);
    partial void DeleteSucursal(Sucursal instance);
    partial void InsertTurno(Turno instance);
    partial void UpdateTurno(Turno instance);
    partial void DeleteTurno(Turno instance);
    #endregion
		
		public TablesDataContext() : 
				base(global::Classes.Properties.Settings.Default.AplicacionWebConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TablesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TablesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TablesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TablesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Afiliado> Afiliado
		{
			get
			{
				return this.GetTable<Afiliado>();
			}
		}
		
		public System.Data.Linq.Table<Usuario> Usuario
		{
			get
			{
				return this.GetTable<Usuario>();
			}
		}
		
		public System.Data.Linq.Table<Año> Año
		{
			get
			{
				return this.GetTable<Año>();
			}
		}
		
		public System.Data.Linq.Table<Dia> Dia
		{
			get
			{
				return this.GetTable<Dia>();
			}
		}
		
		public System.Data.Linq.Table<DisponibilidadMedico> DisponibilidadMedico
		{
			get
			{
				return this.GetTable<DisponibilidadMedico>();
			}
		}
		
		public System.Data.Linq.Table<Especialidad> Especialidad
		{
			get
			{
				return this.GetTable<Especialidad>();
			}
		}
		
		public System.Data.Linq.Table<FechaTurno> FechaTurno
		{
			get
			{
				return this.GetTable<FechaTurno>();
			}
		}
		
		public System.Data.Linq.Table<Horario> Horario
		{
			get
			{
				return this.GetTable<Horario>();
			}
		}
		
		public System.Data.Linq.Table<Localidad> Localidad
		{
			get
			{
				return this.GetTable<Localidad>();
			}
		}
		
		public System.Data.Linq.Table<Medico> Medico
		{
			get
			{
				return this.GetTable<Medico>();
			}
		}
		
		public System.Data.Linq.Table<MedicoSucursal> MedicoSucursal
		{
			get
			{
				return this.GetTable<MedicoSucursal>();
			}
		}
		
		public System.Data.Linq.Table<Mes> Mes
		{
			get
			{
				return this.GetTable<Mes>();
			}
		}
		
		public System.Data.Linq.Table<NuevaContraseña> NuevaContraseña
		{
			get
			{
				return this.GetTable<NuevaContraseña>();
			}
		}
		
		public System.Data.Linq.Table<ObraSocial> ObraSocial
		{
			get
			{
				return this.GetTable<ObraSocial>();
			}
		}
		
		public System.Data.Linq.Table<Perfil> Perfil
		{
			get
			{
				return this.GetTable<Perfil>();
			}
		}
		
		public System.Data.Linq.Table<PlanObraSocial> PlanObraSocial
		{
			get
			{
				return this.GetTable<PlanObraSocial>();
			}
		}
		
		public System.Data.Linq.Table<Provincia> Provincia
		{
			get
			{
				return this.GetTable<Provincia>();
			}
		}
		
		public System.Data.Linq.Table<ServidorMail> ServidorMail
		{
			get
			{
				return this.GetTable<ServidorMail>();
			}
		}
		
		public System.Data.Linq.Table<Sucursal> Sucursal
		{
			get
			{
				return this.GetTable<Sucursal>();
			}
		}
		
		public System.Data.Linq.Table<Turno> Turno
		{
			get
			{
				return this.GetTable<Turno>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Afiliado")]
	public partial class Afiliado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AfiliadoID;
		
		private int _nroDNI;
		
		private string _Nombre;
		
		private string _Apellido;
		
		private int _IDLocalidad;
		
		private int _IDPlan;
		
		private string _NroAfiliado;
		
		private EntitySet<Usuario> _Usuario;
		
		private EntityRef<Localidad> _Localidad;
		
		private EntityRef<PlanObraSocial> _PlanObraSocial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAfiliadoIDChanging(int value);
    partial void OnAfiliadoIDChanged();
    partial void OnnroDNIChanging(int value);
    partial void OnnroDNIChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidoChanging(string value);
    partial void OnApellidoChanged();
    partial void OnIDLocalidadChanging(int value);
    partial void OnIDLocalidadChanged();
    partial void OnIDPlanChanging(int value);
    partial void OnIDPlanChanged();
    partial void OnNroAfiliadoChanging(string value);
    partial void OnNroAfiliadoChanged();
    #endregion
		
		public Afiliado()
		{
			this._Usuario = new EntitySet<Usuario>(new Action<Usuario>(this.attach_Usuario), new Action<Usuario>(this.detach_Usuario));
			this._Localidad = default(EntityRef<Localidad>);
			this._PlanObraSocial = default(EntityRef<PlanObraSocial>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AfiliadoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AfiliadoID
		{
			get
			{
				return this._AfiliadoID;
			}
			set
			{
				if ((this._AfiliadoID != value))
				{
					this.OnAfiliadoIDChanging(value);
					this.SendPropertyChanging();
					this._AfiliadoID = value;
					this.SendPropertyChanged("AfiliadoID");
					this.OnAfiliadoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nroDNI", DbType="Int NOT NULL")]
		public int nroDNI
		{
			get
			{
				return this._nroDNI;
			}
			set
			{
				if ((this._nroDNI != value))
				{
					this.OnnroDNIChanging(value);
					this.SendPropertyChanging();
					this._nroDNI = value;
					this.SendPropertyChanged("nroDNI");
					this.OnnroDNIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apellido", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Apellido
		{
			get
			{
				return this._Apellido;
			}
			set
			{
				if ((this._Apellido != value))
				{
					this.OnApellidoChanging(value);
					this.SendPropertyChanging();
					this._Apellido = value;
					this.SendPropertyChanged("Apellido");
					this.OnApellidoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLocalidad", DbType="Int NOT NULL")]
		public int IDLocalidad
		{
			get
			{
				return this._IDLocalidad;
			}
			set
			{
				if ((this._IDLocalidad != value))
				{
					if (this._Localidad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLocalidadChanging(value);
					this.SendPropertyChanging();
					this._IDLocalidad = value;
					this.SendPropertyChanged("IDLocalidad");
					this.OnIDLocalidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPlan", DbType="Int NOT NULL")]
		public int IDPlan
		{
			get
			{
				return this._IDPlan;
			}
			set
			{
				if ((this._IDPlan != value))
				{
					if (this._PlanObraSocial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPlanChanging(value);
					this.SendPropertyChanging();
					this._IDPlan = value;
					this.SendPropertyChanged("IDPlan");
					this.OnIDPlanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NroAfiliado", DbType="NChar(20)")]
		public string NroAfiliado
		{
			get
			{
				return this._NroAfiliado;
			}
			set
			{
				if ((this._NroAfiliado != value))
				{
					this.OnNroAfiliadoChanging(value);
					this.SendPropertyChanging();
					this._NroAfiliado = value;
					this.SendPropertyChanged("NroAfiliado");
					this.OnNroAfiliadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Afiliado_Usuario", Storage="_Usuario", ThisKey="AfiliadoID", OtherKey="IDAfiliado")]
		public EntitySet<Usuario> Usuario
		{
			get
			{
				return this._Usuario;
			}
			set
			{
				this._Usuario.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localidad_Afiliado", Storage="_Localidad", ThisKey="IDLocalidad", OtherKey="LocalidadId", IsForeignKey=true)]
		public Localidad Localidad
		{
			get
			{
				return this._Localidad.Entity;
			}
			set
			{
				Localidad previousValue = this._Localidad.Entity;
				if (((previousValue != value) 
							|| (this._Localidad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Localidad.Entity = null;
						previousValue.Afiliado.Remove(this);
					}
					this._Localidad.Entity = value;
					if ((value != null))
					{
						value.Afiliado.Add(this);
						this._IDLocalidad = value.LocalidadId;
					}
					else
					{
						this._IDLocalidad = default(int);
					}
					this.SendPropertyChanged("Localidad");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlanObraSocial_Afiliado", Storage="_PlanObraSocial", ThisKey="IDPlan", OtherKey="PlanId", IsForeignKey=true)]
		public PlanObraSocial PlanObraSocial
		{
			get
			{
				return this._PlanObraSocial.Entity;
			}
			set
			{
				PlanObraSocial previousValue = this._PlanObraSocial.Entity;
				if (((previousValue != value) 
							|| (this._PlanObraSocial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlanObraSocial.Entity = null;
						previousValue.Afiliado.Remove(this);
					}
					this._PlanObraSocial.Entity = value;
					if ((value != null))
					{
						value.Afiliado.Add(this);
						this._IDPlan = value.PlanId;
					}
					else
					{
						this._IDPlan = default(int);
					}
					this.SendPropertyChanged("PlanObraSocial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Usuario(Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Afiliado = this;
		}
		
		private void detach_Usuario(Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Afiliado = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usuario")]
	public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UsuarioID;
		
		private int _IDAfiliado;
		
		private string _UsuarioContraseña;
		
		private string _UsuarioEmail;
		
		private int _IDPerfil;
		
		private bool _isMedico;
		
		private EntitySet<Medico> _Medico;
		
		private EntitySet<Turno> _Turno;
		
		private EntitySet<Turno> _Turno1;
		
		private EntityRef<Afiliado> _Afiliado;
		
		private EntityRef<Perfil> _Perfil;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsuarioIDChanging(int value);
    partial void OnUsuarioIDChanged();
    partial void OnIDAfiliadoChanging(int value);
    partial void OnIDAfiliadoChanged();
    partial void OnUsuarioContraseñaChanging(string value);
    partial void OnUsuarioContraseñaChanged();
    partial void OnUsuarioEmailChanging(string value);
    partial void OnUsuarioEmailChanged();
    partial void OnIDPerfilChanging(int value);
    partial void OnIDPerfilChanged();
    partial void OnisMedicoChanging(bool value);
    partial void OnisMedicoChanged();
    #endregion
		
		public Usuario()
		{
			this._Medico = new EntitySet<Medico>(new Action<Medico>(this.attach_Medico), new Action<Medico>(this.detach_Medico));
			this._Turno = new EntitySet<Turno>(new Action<Turno>(this.attach_Turno), new Action<Turno>(this.detach_Turno));
			this._Turno1 = new EntitySet<Turno>(new Action<Turno>(this.attach_Turno1), new Action<Turno>(this.detach_Turno1));
			this._Afiliado = default(EntityRef<Afiliado>);
			this._Perfil = default(EntityRef<Perfil>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsuarioID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UsuarioID
		{
			get
			{
				return this._UsuarioID;
			}
			set
			{
				if ((this._UsuarioID != value))
				{
					this.OnUsuarioIDChanging(value);
					this.SendPropertyChanging();
					this._UsuarioID = value;
					this.SendPropertyChanged("UsuarioID");
					this.OnUsuarioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAfiliado", DbType="Int NOT NULL")]
		public int IDAfiliado
		{
			get
			{
				return this._IDAfiliado;
			}
			set
			{
				if ((this._IDAfiliado != value))
				{
					if (this._Afiliado.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAfiliadoChanging(value);
					this.SendPropertyChanging();
					this._IDAfiliado = value;
					this.SendPropertyChanged("IDAfiliado");
					this.OnIDAfiliadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsuarioContraseña", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string UsuarioContraseña
		{
			get
			{
				return this._UsuarioContraseña;
			}
			set
			{
				if ((this._UsuarioContraseña != value))
				{
					this.OnUsuarioContraseñaChanging(value);
					this.SendPropertyChanging();
					this._UsuarioContraseña = value;
					this.SendPropertyChanged("UsuarioContraseña");
					this.OnUsuarioContraseñaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsuarioEmail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UsuarioEmail
		{
			get
			{
				return this._UsuarioEmail;
			}
			set
			{
				if ((this._UsuarioEmail != value))
				{
					this.OnUsuarioEmailChanging(value);
					this.SendPropertyChanging();
					this._UsuarioEmail = value;
					this.SendPropertyChanged("UsuarioEmail");
					this.OnUsuarioEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPerfil", DbType="Int NOT NULL")]
		public int IDPerfil
		{
			get
			{
				return this._IDPerfil;
			}
			set
			{
				if ((this._IDPerfil != value))
				{
					if (this._Perfil.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPerfilChanging(value);
					this.SendPropertyChanging();
					this._IDPerfil = value;
					this.SendPropertyChanged("IDPerfil");
					this.OnIDPerfilChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isMedico", DbType="Bit NOT NULL")]
		public bool isMedico
		{
			get
			{
				return this._isMedico;
			}
			set
			{
				if ((this._isMedico != value))
				{
					this.OnisMedicoChanging(value);
					this.SendPropertyChanging();
					this._isMedico = value;
					this.SendPropertyChanged("isMedico");
					this.OnisMedicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_Medico", Storage="_Medico", ThisKey="UsuarioID", OtherKey="IDUsuario")]
		public EntitySet<Medico> Medico
		{
			get
			{
				return this._Medico;
			}
			set
			{
				this._Medico.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_Turno", Storage="_Turno", ThisKey="UsuarioID", OtherKey="IDMedico")]
		public EntitySet<Turno> Turno
		{
			get
			{
				return this._Turno;
			}
			set
			{
				this._Turno.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_Turno1", Storage="_Turno1", ThisKey="UsuarioID", OtherKey="IDUsuario")]
		public EntitySet<Turno> Turno1
		{
			get
			{
				return this._Turno1;
			}
			set
			{
				this._Turno1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Afiliado_Usuario", Storage="_Afiliado", ThisKey="IDAfiliado", OtherKey="AfiliadoID", IsForeignKey=true)]
		public Afiliado Afiliado
		{
			get
			{
				return this._Afiliado.Entity;
			}
			set
			{
				Afiliado previousValue = this._Afiliado.Entity;
				if (((previousValue != value) 
							|| (this._Afiliado.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Afiliado.Entity = null;
						previousValue.Usuario.Remove(this);
					}
					this._Afiliado.Entity = value;
					if ((value != null))
					{
						value.Usuario.Add(this);
						this._IDAfiliado = value.AfiliadoID;
					}
					else
					{
						this._IDAfiliado = default(int);
					}
					this.SendPropertyChanged("Afiliado");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Perfil_Usuario", Storage="_Perfil", ThisKey="IDPerfil", OtherKey="PerfilId", IsForeignKey=true)]
		public Perfil Perfil
		{
			get
			{
				return this._Perfil.Entity;
			}
			set
			{
				Perfil previousValue = this._Perfil.Entity;
				if (((previousValue != value) 
							|| (this._Perfil.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Perfil.Entity = null;
						previousValue.Usuario.Remove(this);
					}
					this._Perfil.Entity = value;
					if ((value != null))
					{
						value.Usuario.Add(this);
						this._IDPerfil = value.PerfilId;
					}
					else
					{
						this._IDPerfil = default(int);
					}
					this.SendPropertyChanged("Perfil");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medico(Medico entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_Medico(Medico entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
		
		private void attach_Turno(Turno entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_Turno(Turno entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
		
		private void attach_Turno1(Turno entity)
		{
			this.SendPropertyChanging();
			entity.Usuario1 = this;
		}
		
		private void detach_Turno1(Turno entity)
		{
			this.SendPropertyChanging();
			entity.Usuario1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Año")]
	public partial class Año : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AñoID;
		
		private int _NombreAño;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAñoIDChanging(int value);
    partial void OnAñoIDChanged();
    partial void OnNombreAñoChanging(int value);
    partial void OnNombreAñoChanged();
    #endregion
		
		public Año()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AñoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AñoID
		{
			get
			{
				return this._AñoID;
			}
			set
			{
				if ((this._AñoID != value))
				{
					this.OnAñoIDChanging(value);
					this.SendPropertyChanging();
					this._AñoID = value;
					this.SendPropertyChanged("AñoID");
					this.OnAñoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NombreAño", DbType="Int NOT NULL")]
		public int NombreAño
		{
			get
			{
				return this._NombreAño;
			}
			set
			{
				if ((this._NombreAño != value))
				{
					this.OnNombreAñoChanging(value);
					this.SendPropertyChanging();
					this._NombreAño = value;
					this.SendPropertyChanged("NombreAño");
					this.OnNombreAñoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dia")]
	public partial class Dia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DiaID;
		
		private string _NombreDia;
		
		private EntitySet<DisponibilidadMedico> _DisponibilidadMedico;
		
		private EntitySet<FechaTurno> _FechaTurno;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDiaIDChanging(int value);
    partial void OnDiaIDChanged();
    partial void OnNombreDiaChanging(string value);
    partial void OnNombreDiaChanged();
    #endregion
		
		public Dia()
		{
			this._DisponibilidadMedico = new EntitySet<DisponibilidadMedico>(new Action<DisponibilidadMedico>(this.attach_DisponibilidadMedico), new Action<DisponibilidadMedico>(this.detach_DisponibilidadMedico));
			this._FechaTurno = new EntitySet<FechaTurno>(new Action<FechaTurno>(this.attach_FechaTurno), new Action<FechaTurno>(this.detach_FechaTurno));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DiaID
		{
			get
			{
				return this._DiaID;
			}
			set
			{
				if ((this._DiaID != value))
				{
					this.OnDiaIDChanging(value);
					this.SendPropertyChanging();
					this._DiaID = value;
					this.SendPropertyChanged("DiaID");
					this.OnDiaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NombreDia", DbType="Char(10) NOT NULL", CanBeNull=false)]
		public string NombreDia
		{
			get
			{
				return this._NombreDia;
			}
			set
			{
				if ((this._NombreDia != value))
				{
					this.OnNombreDiaChanging(value);
					this.SendPropertyChanging();
					this._NombreDia = value;
					this.SendPropertyChanged("NombreDia");
					this.OnNombreDiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dia_DisponibilidadMedico", Storage="_DisponibilidadMedico", ThisKey="DiaID", OtherKey="IDDia")]
		public EntitySet<DisponibilidadMedico> DisponibilidadMedico
		{
			get
			{
				return this._DisponibilidadMedico;
			}
			set
			{
				this._DisponibilidadMedico.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dia_FechaTurno", Storage="_FechaTurno", ThisKey="DiaID", OtherKey="IDDia")]
		public EntitySet<FechaTurno> FechaTurno
		{
			get
			{
				return this._FechaTurno;
			}
			set
			{
				this._FechaTurno.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DisponibilidadMedico(DisponibilidadMedico entity)
		{
			this.SendPropertyChanging();
			entity.Dia = this;
		}
		
		private void detach_DisponibilidadMedico(DisponibilidadMedico entity)
		{
			this.SendPropertyChanging();
			entity.Dia = null;
		}
		
		private void attach_FechaTurno(FechaTurno entity)
		{
			this.SendPropertyChanging();
			entity.Dia = this;
		}
		
		private void detach_FechaTurno(FechaTurno entity)
		{
			this.SendPropertyChanging();
			entity.Dia = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisponibilidadMedico")]
	public partial class DisponibilidadMedico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DisponibilidadID;
		
		private int _IDMedico;
		
		private int _IDDia;
		
		private int _Consultorio;
		
		private System.TimeSpan _HorarioInicio;
		
		private System.TimeSpan _HorarioFin;
		
		private int _IDSucursal;
		
		private EntityRef<Dia> _Dia;
		
		private EntityRef<Medico> _Medico;
		
		private EntityRef<Sucursal> _Sucursal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisponibilidadIDChanging(int value);
    partial void OnDisponibilidadIDChanged();
    partial void OnIDMedicoChanging(int value);
    partial void OnIDMedicoChanged();
    partial void OnIDDiaChanging(int value);
    partial void OnIDDiaChanged();
    partial void OnConsultorioChanging(int value);
    partial void OnConsultorioChanged();
    partial void OnHorarioInicioChanging(System.TimeSpan value);
    partial void OnHorarioInicioChanged();
    partial void OnHorarioFinChanging(System.TimeSpan value);
    partial void OnHorarioFinChanged();
    partial void OnIDSucursalChanging(int value);
    partial void OnIDSucursalChanged();
    #endregion
		
		public DisponibilidadMedico()
		{
			this._Dia = default(EntityRef<Dia>);
			this._Medico = default(EntityRef<Medico>);
			this._Sucursal = default(EntityRef<Sucursal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisponibilidadID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DisponibilidadID
		{
			get
			{
				return this._DisponibilidadID;
			}
			set
			{
				if ((this._DisponibilidadID != value))
				{
					this.OnDisponibilidadIDChanging(value);
					this.SendPropertyChanging();
					this._DisponibilidadID = value;
					this.SendPropertyChanged("DisponibilidadID");
					this.OnDisponibilidadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMedico", DbType="Int NOT NULL")]
		public int IDMedico
		{
			get
			{
				return this._IDMedico;
			}
			set
			{
				if ((this._IDMedico != value))
				{
					if (this._Medico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMedicoChanging(value);
					this.SendPropertyChanging();
					this._IDMedico = value;
					this.SendPropertyChanged("IDMedico");
					this.OnIDMedicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDia", DbType="Int NOT NULL")]
		public int IDDia
		{
			get
			{
				return this._IDDia;
			}
			set
			{
				if ((this._IDDia != value))
				{
					if (this._Dia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDiaChanging(value);
					this.SendPropertyChanging();
					this._IDDia = value;
					this.SendPropertyChanged("IDDia");
					this.OnIDDiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Consultorio", DbType="Int NOT NULL")]
		public int Consultorio
		{
			get
			{
				return this._Consultorio;
			}
			set
			{
				if ((this._Consultorio != value))
				{
					this.OnConsultorioChanging(value);
					this.SendPropertyChanging();
					this._Consultorio = value;
					this.SendPropertyChanged("Consultorio");
					this.OnConsultorioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorarioInicio", DbType="Time NOT NULL")]
		public System.TimeSpan HorarioInicio
		{
			get
			{
				return this._HorarioInicio;
			}
			set
			{
				if ((this._HorarioInicio != value))
				{
					this.OnHorarioInicioChanging(value);
					this.SendPropertyChanging();
					this._HorarioInicio = value;
					this.SendPropertyChanged("HorarioInicio");
					this.OnHorarioInicioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorarioFin", DbType="Time NOT NULL")]
		public System.TimeSpan HorarioFin
		{
			get
			{
				return this._HorarioFin;
			}
			set
			{
				if ((this._HorarioFin != value))
				{
					this.OnHorarioFinChanging(value);
					this.SendPropertyChanging();
					this._HorarioFin = value;
					this.SendPropertyChanged("HorarioFin");
					this.OnHorarioFinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSucursal", DbType="Int NOT NULL")]
		public int IDSucursal
		{
			get
			{
				return this._IDSucursal;
			}
			set
			{
				if ((this._IDSucursal != value))
				{
					if (this._Sucursal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSucursalChanging(value);
					this.SendPropertyChanging();
					this._IDSucursal = value;
					this.SendPropertyChanged("IDSucursal");
					this.OnIDSucursalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dia_DisponibilidadMedico", Storage="_Dia", ThisKey="IDDia", OtherKey="DiaID", IsForeignKey=true)]
		public Dia Dia
		{
			get
			{
				return this._Dia.Entity;
			}
			set
			{
				Dia previousValue = this._Dia.Entity;
				if (((previousValue != value) 
							|| (this._Dia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dia.Entity = null;
						previousValue.DisponibilidadMedico.Remove(this);
					}
					this._Dia.Entity = value;
					if ((value != null))
					{
						value.DisponibilidadMedico.Add(this);
						this._IDDia = value.DiaID;
					}
					else
					{
						this._IDDia = default(int);
					}
					this.SendPropertyChanged("Dia");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_DisponibilidadMedico", Storage="_Medico", ThisKey="IDMedico", OtherKey="MedicoID", IsForeignKey=true)]
		public Medico Medico
		{
			get
			{
				return this._Medico.Entity;
			}
			set
			{
				Medico previousValue = this._Medico.Entity;
				if (((previousValue != value) 
							|| (this._Medico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medico.Entity = null;
						previousValue.DisponibilidadMedico.Remove(this);
					}
					this._Medico.Entity = value;
					if ((value != null))
					{
						value.DisponibilidadMedico.Add(this);
						this._IDMedico = value.MedicoID;
					}
					else
					{
						this._IDMedico = default(int);
					}
					this.SendPropertyChanged("Medico");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sucursal_DisponibilidadMedico", Storage="_Sucursal", ThisKey="IDSucursal", OtherKey="SucursalId", IsForeignKey=true)]
		public Sucursal Sucursal
		{
			get
			{
				return this._Sucursal.Entity;
			}
			set
			{
				Sucursal previousValue = this._Sucursal.Entity;
				if (((previousValue != value) 
							|| (this._Sucursal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sucursal.Entity = null;
						previousValue.DisponibilidadMedico.Remove(this);
					}
					this._Sucursal.Entity = value;
					if ((value != null))
					{
						value.DisponibilidadMedico.Add(this);
						this._IDSucursal = value.SucursalId;
					}
					else
					{
						this._IDSucursal = default(int);
					}
					this.SendPropertyChanged("Sucursal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Especialidad")]
	public partial class Especialidad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EspecialidadId;
		
		private string _EspecialidadDescripcion;
		
		private EntitySet<Medico> _Medico;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEspecialidadIdChanging(int value);
    partial void OnEspecialidadIdChanged();
    partial void OnEspecialidadDescripcionChanging(string value);
    partial void OnEspecialidadDescripcionChanged();
    #endregion
		
		public Especialidad()
		{
			this._Medico = new EntitySet<Medico>(new Action<Medico>(this.attach_Medico), new Action<Medico>(this.detach_Medico));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EspecialidadId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EspecialidadId
		{
			get
			{
				return this._EspecialidadId;
			}
			set
			{
				if ((this._EspecialidadId != value))
				{
					this.OnEspecialidadIdChanging(value);
					this.SendPropertyChanging();
					this._EspecialidadId = value;
					this.SendPropertyChanged("EspecialidadId");
					this.OnEspecialidadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EspecialidadDescripcion", DbType="NChar(50)")]
		public string EspecialidadDescripcion
		{
			get
			{
				return this._EspecialidadDescripcion;
			}
			set
			{
				if ((this._EspecialidadDescripcion != value))
				{
					this.OnEspecialidadDescripcionChanging(value);
					this.SendPropertyChanging();
					this._EspecialidadDescripcion = value;
					this.SendPropertyChanged("EspecialidadDescripcion");
					this.OnEspecialidadDescripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Especialidad_Medico", Storage="_Medico", ThisKey="EspecialidadId", OtherKey="IDEspecialidad")]
		public EntitySet<Medico> Medico
		{
			get
			{
				return this._Medico;
			}
			set
			{
				this._Medico.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Medico(Medico entity)
		{
			this.SendPropertyChanging();
			entity.Especialidad = this;
		}
		
		private void detach_Medico(Medico entity)
		{
			this.SendPropertyChanging();
			entity.Especialidad = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FechaTurno")]
	public partial class FechaTurno : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FechaTurnoID;
		
		private int _IDDia;
		
		private int _IDHorario;
		
		private System.DateTime _Fecha;
		
		private EntitySet<Turno> _Turno;
		
		private EntityRef<Dia> _Dia;
		
		private EntityRef<Horario> _Horario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFechaTurnoIDChanging(int value);
    partial void OnFechaTurnoIDChanged();
    partial void OnIDDiaChanging(int value);
    partial void OnIDDiaChanged();
    partial void OnIDHorarioChanging(int value);
    partial void OnIDHorarioChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    #endregion
		
		public FechaTurno()
		{
			this._Turno = new EntitySet<Turno>(new Action<Turno>(this.attach_Turno), new Action<Turno>(this.detach_Turno));
			this._Dia = default(EntityRef<Dia>);
			this._Horario = default(EntityRef<Horario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaTurnoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FechaTurnoID
		{
			get
			{
				return this._FechaTurnoID;
			}
			set
			{
				if ((this._FechaTurnoID != value))
				{
					this.OnFechaTurnoIDChanging(value);
					this.SendPropertyChanging();
					this._FechaTurnoID = value;
					this.SendPropertyChanged("FechaTurnoID");
					this.OnFechaTurnoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDDia", DbType="Int NOT NULL")]
		public int IDDia
		{
			get
			{
				return this._IDDia;
			}
			set
			{
				if ((this._IDDia != value))
				{
					if (this._Dia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDDiaChanging(value);
					this.SendPropertyChanging();
					this._IDDia = value;
					this.SendPropertyChanged("IDDia");
					this.OnIDDiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDHorario", DbType="Int NOT NULL")]
		public int IDHorario
		{
			get
			{
				return this._IDHorario;
			}
			set
			{
				if ((this._IDHorario != value))
				{
					if (this._Horario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDHorarioChanging(value);
					this.SendPropertyChanging();
					this._IDHorario = value;
					this.SendPropertyChanged("IDHorario");
					this.OnIDHorarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fecha", DbType="Date NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FechaTurno_Turno", Storage="_Turno", ThisKey="FechaTurnoID", OtherKey="IDFechaTurno")]
		public EntitySet<Turno> Turno
		{
			get
			{
				return this._Turno;
			}
			set
			{
				this._Turno.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dia_FechaTurno", Storage="_Dia", ThisKey="IDDia", OtherKey="DiaID", IsForeignKey=true)]
		public Dia Dia
		{
			get
			{
				return this._Dia.Entity;
			}
			set
			{
				Dia previousValue = this._Dia.Entity;
				if (((previousValue != value) 
							|| (this._Dia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dia.Entity = null;
						previousValue.FechaTurno.Remove(this);
					}
					this._Dia.Entity = value;
					if ((value != null))
					{
						value.FechaTurno.Add(this);
						this._IDDia = value.DiaID;
					}
					else
					{
						this._IDDia = default(int);
					}
					this.SendPropertyChanged("Dia");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Horario_FechaTurno", Storage="_Horario", ThisKey="IDHorario", OtherKey="HorarioID", IsForeignKey=true)]
		public Horario Horario
		{
			get
			{
				return this._Horario.Entity;
			}
			set
			{
				Horario previousValue = this._Horario.Entity;
				if (((previousValue != value) 
							|| (this._Horario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Horario.Entity = null;
						previousValue.FechaTurno.Remove(this);
					}
					this._Horario.Entity = value;
					if ((value != null))
					{
						value.FechaTurno.Add(this);
						this._IDHorario = value.HorarioID;
					}
					else
					{
						this._IDHorario = default(int);
					}
					this.SendPropertyChanged("Horario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Turno(Turno entity)
		{
			this.SendPropertyChanging();
			entity.FechaTurno = this;
		}
		
		private void detach_Turno(Turno entity)
		{
			this.SendPropertyChanging();
			entity.FechaTurno = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Horario")]
	public partial class Horario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HorarioID;
		
		private System.TimeSpan _Hora;
		
		private EntitySet<FechaTurno> _FechaTurno;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHorarioIDChanging(int value);
    partial void OnHorarioIDChanged();
    partial void OnHoraChanging(System.TimeSpan value);
    partial void OnHoraChanged();
    #endregion
		
		public Horario()
		{
			this._FechaTurno = new EntitySet<FechaTurno>(new Action<FechaTurno>(this.attach_FechaTurno), new Action<FechaTurno>(this.detach_FechaTurno));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HorarioID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HorarioID
		{
			get
			{
				return this._HorarioID;
			}
			set
			{
				if ((this._HorarioID != value))
				{
					this.OnHorarioIDChanging(value);
					this.SendPropertyChanging();
					this._HorarioID = value;
					this.SendPropertyChanged("HorarioID");
					this.OnHorarioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hora", DbType="Time NOT NULL")]
		public System.TimeSpan Hora
		{
			get
			{
				return this._Hora;
			}
			set
			{
				if ((this._Hora != value))
				{
					this.OnHoraChanging(value);
					this.SendPropertyChanging();
					this._Hora = value;
					this.SendPropertyChanged("Hora");
					this.OnHoraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Horario_FechaTurno", Storage="_FechaTurno", ThisKey="HorarioID", OtherKey="IDHorario")]
		public EntitySet<FechaTurno> FechaTurno
		{
			get
			{
				return this._FechaTurno;
			}
			set
			{
				this._FechaTurno.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FechaTurno(FechaTurno entity)
		{
			this.SendPropertyChanging();
			entity.Horario = this;
		}
		
		private void detach_FechaTurno(FechaTurno entity)
		{
			this.SendPropertyChanging();
			entity.Horario = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Localidad")]
	public partial class Localidad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocalidadId;
		
		private string _LocalidadDescripcion;
		
		private int _IDProvincia;
		
		private EntitySet<Afiliado> _Afiliado;
		
		private EntitySet<Sucursal> _Sucursal;
		
		private EntitySet<Turno> _Turno;
		
		private EntityRef<Provincia> _Provincia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocalidadIdChanging(int value);
    partial void OnLocalidadIdChanged();
    partial void OnLocalidadDescripcionChanging(string value);
    partial void OnLocalidadDescripcionChanged();
    partial void OnIDProvinciaChanging(int value);
    partial void OnIDProvinciaChanged();
    #endregion
		
		public Localidad()
		{
			this._Afiliado = new EntitySet<Afiliado>(new Action<Afiliado>(this.attach_Afiliado), new Action<Afiliado>(this.detach_Afiliado));
			this._Sucursal = new EntitySet<Sucursal>(new Action<Sucursal>(this.attach_Sucursal), new Action<Sucursal>(this.detach_Sucursal));
			this._Turno = new EntitySet<Turno>(new Action<Turno>(this.attach_Turno), new Action<Turno>(this.detach_Turno));
			this._Provincia = default(EntityRef<Provincia>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalidadId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocalidadId
		{
			get
			{
				return this._LocalidadId;
			}
			set
			{
				if ((this._LocalidadId != value))
				{
					this.OnLocalidadIdChanging(value);
					this.SendPropertyChanging();
					this._LocalidadId = value;
					this.SendPropertyChanged("LocalidadId");
					this.OnLocalidadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalidadDescripcion", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string LocalidadDescripcion
		{
			get
			{
				return this._LocalidadDescripcion;
			}
			set
			{
				if ((this._LocalidadDescripcion != value))
				{
					this.OnLocalidadDescripcionChanging(value);
					this.SendPropertyChanging();
					this._LocalidadDescripcion = value;
					this.SendPropertyChanged("LocalidadDescripcion");
					this.OnLocalidadDescripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProvincia", DbType="Int NOT NULL")]
		public int IDProvincia
		{
			get
			{
				return this._IDProvincia;
			}
			set
			{
				if ((this._IDProvincia != value))
				{
					if (this._Provincia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDProvinciaChanging(value);
					this.SendPropertyChanging();
					this._IDProvincia = value;
					this.SendPropertyChanged("IDProvincia");
					this.OnIDProvinciaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localidad_Afiliado", Storage="_Afiliado", ThisKey="LocalidadId", OtherKey="IDLocalidad")]
		public EntitySet<Afiliado> Afiliado
		{
			get
			{
				return this._Afiliado;
			}
			set
			{
				this._Afiliado.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localidad_Sucursal", Storage="_Sucursal", ThisKey="LocalidadId", OtherKey="IDLocalidad")]
		public EntitySet<Sucursal> Sucursal
		{
			get
			{
				return this._Sucursal;
			}
			set
			{
				this._Sucursal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localidad_Turno", Storage="_Turno", ThisKey="LocalidadId", OtherKey="IDLocalidad")]
		public EntitySet<Turno> Turno
		{
			get
			{
				return this._Turno;
			}
			set
			{
				this._Turno.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provincia_Localidad", Storage="_Provincia", ThisKey="IDProvincia", OtherKey="ProvinciaId", IsForeignKey=true)]
		public Provincia Provincia
		{
			get
			{
				return this._Provincia.Entity;
			}
			set
			{
				Provincia previousValue = this._Provincia.Entity;
				if (((previousValue != value) 
							|| (this._Provincia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Provincia.Entity = null;
						previousValue.Localidad.Remove(this);
					}
					this._Provincia.Entity = value;
					if ((value != null))
					{
						value.Localidad.Add(this);
						this._IDProvincia = value.ProvinciaId;
					}
					else
					{
						this._IDProvincia = default(int);
					}
					this.SendPropertyChanged("Provincia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Afiliado(Afiliado entity)
		{
			this.SendPropertyChanging();
			entity.Localidad = this;
		}
		
		private void detach_Afiliado(Afiliado entity)
		{
			this.SendPropertyChanging();
			entity.Localidad = null;
		}
		
		private void attach_Sucursal(Sucursal entity)
		{
			this.SendPropertyChanging();
			entity.Localidad = this;
		}
		
		private void detach_Sucursal(Sucursal entity)
		{
			this.SendPropertyChanging();
			entity.Localidad = null;
		}
		
		private void attach_Turno(Turno entity)
		{
			this.SendPropertyChanging();
			entity.Localidad = this;
		}
		
		private void detach_Turno(Turno entity)
		{
			this.SendPropertyChanging();
			entity.Localidad = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medico")]
	public partial class Medico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicoID;
		
		private int _IDEspecialidad;
		
		private int _IDUsuario;
		
		private EntitySet<DisponibilidadMedico> _DisponibilidadMedico;
		
		private EntitySet<MedicoSucursal> _MedicoSucursal;
		
		private EntityRef<Especialidad> _Especialidad;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicoIDChanging(int value);
    partial void OnMedicoIDChanged();
    partial void OnIDEspecialidadChanging(int value);
    partial void OnIDEspecialidadChanged();
    partial void OnIDUsuarioChanging(int value);
    partial void OnIDUsuarioChanged();
    #endregion
		
		public Medico()
		{
			this._DisponibilidadMedico = new EntitySet<DisponibilidadMedico>(new Action<DisponibilidadMedico>(this.attach_DisponibilidadMedico), new Action<DisponibilidadMedico>(this.detach_DisponibilidadMedico));
			this._MedicoSucursal = new EntitySet<MedicoSucursal>(new Action<MedicoSucursal>(this.attach_MedicoSucursal), new Action<MedicoSucursal>(this.detach_MedicoSucursal));
			this._Especialidad = default(EntityRef<Especialidad>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MedicoID
		{
			get
			{
				return this._MedicoID;
			}
			set
			{
				if ((this._MedicoID != value))
				{
					this.OnMedicoIDChanging(value);
					this.SendPropertyChanging();
					this._MedicoID = value;
					this.SendPropertyChanged("MedicoID");
					this.OnMedicoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEspecialidad", DbType="Int NOT NULL")]
		public int IDEspecialidad
		{
			get
			{
				return this._IDEspecialidad;
			}
			set
			{
				if ((this._IDEspecialidad != value))
				{
					if (this._Especialidad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEspecialidadChanging(value);
					this.SendPropertyChanging();
					this._IDEspecialidad = value;
					this.SendPropertyChanged("IDEspecialidad");
					this.OnIDEspecialidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUsuario", DbType="Int NOT NULL")]
		public int IDUsuario
		{
			get
			{
				return this._IDUsuario;
			}
			set
			{
				if ((this._IDUsuario != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUsuarioChanging(value);
					this.SendPropertyChanging();
					this._IDUsuario = value;
					this.SendPropertyChanged("IDUsuario");
					this.OnIDUsuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_DisponibilidadMedico", Storage="_DisponibilidadMedico", ThisKey="MedicoID", OtherKey="IDMedico")]
		public EntitySet<DisponibilidadMedico> DisponibilidadMedico
		{
			get
			{
				return this._DisponibilidadMedico;
			}
			set
			{
				this._DisponibilidadMedico.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_MedicoSucursal", Storage="_MedicoSucursal", ThisKey="MedicoID", OtherKey="IDMedico")]
		public EntitySet<MedicoSucursal> MedicoSucursal
		{
			get
			{
				return this._MedicoSucursal;
			}
			set
			{
				this._MedicoSucursal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Especialidad_Medico", Storage="_Especialidad", ThisKey="IDEspecialidad", OtherKey="EspecialidadId", IsForeignKey=true)]
		public Especialidad Especialidad
		{
			get
			{
				return this._Especialidad.Entity;
			}
			set
			{
				Especialidad previousValue = this._Especialidad.Entity;
				if (((previousValue != value) 
							|| (this._Especialidad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Especialidad.Entity = null;
						previousValue.Medico.Remove(this);
					}
					this._Especialidad.Entity = value;
					if ((value != null))
					{
						value.Medico.Add(this);
						this._IDEspecialidad = value.EspecialidadId;
					}
					else
					{
						this._IDEspecialidad = default(int);
					}
					this.SendPropertyChanged("Especialidad");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_Medico", Storage="_Usuario", ThisKey="IDUsuario", OtherKey="UsuarioID", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Medico.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Medico.Add(this);
						this._IDUsuario = value.UsuarioID;
					}
					else
					{
						this._IDUsuario = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DisponibilidadMedico(DisponibilidadMedico entity)
		{
			this.SendPropertyChanging();
			entity.Medico = this;
		}
		
		private void detach_DisponibilidadMedico(DisponibilidadMedico entity)
		{
			this.SendPropertyChanging();
			entity.Medico = null;
		}
		
		private void attach_MedicoSucursal(MedicoSucursal entity)
		{
			this.SendPropertyChanging();
			entity.Medico = this;
		}
		
		private void detach_MedicoSucursal(MedicoSucursal entity)
		{
			this.SendPropertyChanging();
			entity.Medico = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MedicoSucursal")]
	public partial class MedicoSucursal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDMedicoSucursal;
		
		private int _IDMedico;
		
		private int _IDSucursal;
		
		private EntityRef<Medico> _Medico;
		
		private EntityRef<Sucursal> _Sucursal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMedicoSucursalChanging(int value);
    partial void OnIDMedicoSucursalChanged();
    partial void OnIDMedicoChanging(int value);
    partial void OnIDMedicoChanged();
    partial void OnIDSucursalChanging(int value);
    partial void OnIDSucursalChanged();
    #endregion
		
		public MedicoSucursal()
		{
			this._Medico = default(EntityRef<Medico>);
			this._Sucursal = default(EntityRef<Sucursal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMedicoSucursal", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDMedicoSucursal
		{
			get
			{
				return this._IDMedicoSucursal;
			}
			set
			{
				if ((this._IDMedicoSucursal != value))
				{
					this.OnIDMedicoSucursalChanging(value);
					this.SendPropertyChanging();
					this._IDMedicoSucursal = value;
					this.SendPropertyChanged("IDMedicoSucursal");
					this.OnIDMedicoSucursalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMedico", DbType="Int NOT NULL")]
		public int IDMedico
		{
			get
			{
				return this._IDMedico;
			}
			set
			{
				if ((this._IDMedico != value))
				{
					if (this._Medico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMedicoChanging(value);
					this.SendPropertyChanging();
					this._IDMedico = value;
					this.SendPropertyChanged("IDMedico");
					this.OnIDMedicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSucursal", DbType="Int NOT NULL")]
		public int IDSucursal
		{
			get
			{
				return this._IDSucursal;
			}
			set
			{
				if ((this._IDSucursal != value))
				{
					if (this._Sucursal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSucursalChanging(value);
					this.SendPropertyChanging();
					this._IDSucursal = value;
					this.SendPropertyChanged("IDSucursal");
					this.OnIDSucursalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medico_MedicoSucursal", Storage="_Medico", ThisKey="IDMedico", OtherKey="MedicoID", IsForeignKey=true)]
		public Medico Medico
		{
			get
			{
				return this._Medico.Entity;
			}
			set
			{
				Medico previousValue = this._Medico.Entity;
				if (((previousValue != value) 
							|| (this._Medico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medico.Entity = null;
						previousValue.MedicoSucursal.Remove(this);
					}
					this._Medico.Entity = value;
					if ((value != null))
					{
						value.MedicoSucursal.Add(this);
						this._IDMedico = value.MedicoID;
					}
					else
					{
						this._IDMedico = default(int);
					}
					this.SendPropertyChanged("Medico");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sucursal_MedicoSucursal", Storage="_Sucursal", ThisKey="IDSucursal", OtherKey="SucursalId", IsForeignKey=true)]
		public Sucursal Sucursal
		{
			get
			{
				return this._Sucursal.Entity;
			}
			set
			{
				Sucursal previousValue = this._Sucursal.Entity;
				if (((previousValue != value) 
							|| (this._Sucursal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sucursal.Entity = null;
						previousValue.MedicoSucursal.Remove(this);
					}
					this._Sucursal.Entity = value;
					if ((value != null))
					{
						value.MedicoSucursal.Add(this);
						this._IDSucursal = value.SucursalId;
					}
					else
					{
						this._IDSucursal = default(int);
					}
					this.SendPropertyChanged("Sucursal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mes")]
	public partial class Mes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MesID;
		
		private string _NombreMes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMesIDChanging(int value);
    partial void OnMesIDChanged();
    partial void OnNombreMesChanging(string value);
    partial void OnNombreMesChanged();
    #endregion
		
		public Mes()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MesID
		{
			get
			{
				return this._MesID;
			}
			set
			{
				if ((this._MesID != value))
				{
					this.OnMesIDChanging(value);
					this.SendPropertyChanging();
					this._MesID = value;
					this.SendPropertyChanged("MesID");
					this.OnMesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NombreMes", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string NombreMes
		{
			get
			{
				return this._NombreMes;
			}
			set
			{
				if ((this._NombreMes != value))
				{
					this.OnNombreMesChanging(value);
					this.SendPropertyChanging();
					this._NombreMes = value;
					this.SendPropertyChanged("NombreMes");
					this.OnNombreMesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NuevaContraseña")]
	public partial class NuevaContraseña : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDUsuario;
		
		private System.DateTime _Creacion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDUsuarioChanging(int value);
    partial void OnIDUsuarioChanged();
    partial void OnCreacionChanging(System.DateTime value);
    partial void OnCreacionChanged();
    #endregion
		
		public NuevaContraseña()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUsuario", DbType="Int NOT NULL")]
		public int IDUsuario
		{
			get
			{
				return this._IDUsuario;
			}
			set
			{
				if ((this._IDUsuario != value))
				{
					this.OnIDUsuarioChanging(value);
					this.SendPropertyChanging();
					this._IDUsuario = value;
					this.SendPropertyChanged("IDUsuario");
					this.OnIDUsuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creacion", DbType="DateTime NOT NULL")]
		public System.DateTime Creacion
		{
			get
			{
				return this._Creacion;
			}
			set
			{
				if ((this._Creacion != value))
				{
					this.OnCreacionChanging(value);
					this.SendPropertyChanging();
					this._Creacion = value;
					this.SendPropertyChanged("Creacion");
					this.OnCreacionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObraSocial")]
	public partial class ObraSocial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ObraSocialId;
		
		private string _ObraSocialDescripcion;
		
		private EntitySet<PlanObraSocial> _PlanObraSocial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObraSocialIdChanging(int value);
    partial void OnObraSocialIdChanged();
    partial void OnObraSocialDescripcionChanging(string value);
    partial void OnObraSocialDescripcionChanged();
    #endregion
		
		public ObraSocial()
		{
			this._PlanObraSocial = new EntitySet<PlanObraSocial>(new Action<PlanObraSocial>(this.attach_PlanObraSocial), new Action<PlanObraSocial>(this.detach_PlanObraSocial));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObraSocialId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ObraSocialId
		{
			get
			{
				return this._ObraSocialId;
			}
			set
			{
				if ((this._ObraSocialId != value))
				{
					this.OnObraSocialIdChanging(value);
					this.SendPropertyChanging();
					this._ObraSocialId = value;
					this.SendPropertyChanged("ObraSocialId");
					this.OnObraSocialIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObraSocialDescripcion", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string ObraSocialDescripcion
		{
			get
			{
				return this._ObraSocialDescripcion;
			}
			set
			{
				if ((this._ObraSocialDescripcion != value))
				{
					this.OnObraSocialDescripcionChanging(value);
					this.SendPropertyChanging();
					this._ObraSocialDescripcion = value;
					this.SendPropertyChanged("ObraSocialDescripcion");
					this.OnObraSocialDescripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObraSocial_PlanObraSocial", Storage="_PlanObraSocial", ThisKey="ObraSocialId", OtherKey="IDObraSocial")]
		public EntitySet<PlanObraSocial> PlanObraSocial
		{
			get
			{
				return this._PlanObraSocial;
			}
			set
			{
				this._PlanObraSocial.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlanObraSocial(PlanObraSocial entity)
		{
			this.SendPropertyChanging();
			entity.ObraSocial = this;
		}
		
		private void detach_PlanObraSocial(PlanObraSocial entity)
		{
			this.SendPropertyChanging();
			entity.ObraSocial = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Perfil")]
	public partial class Perfil : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PerfilId;
		
		private string _PerfilDescripcion;
		
		private System.Nullable<bool> _PerfilHabilitado;
		
		private EntitySet<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPerfilIdChanging(int value);
    partial void OnPerfilIdChanged();
    partial void OnPerfilDescripcionChanging(string value);
    partial void OnPerfilDescripcionChanged();
    partial void OnPerfilHabilitadoChanging(System.Nullable<bool> value);
    partial void OnPerfilHabilitadoChanged();
    #endregion
		
		public Perfil()
		{
			this._Usuario = new EntitySet<Usuario>(new Action<Usuario>(this.attach_Usuario), new Action<Usuario>(this.detach_Usuario));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerfilId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PerfilId
		{
			get
			{
				return this._PerfilId;
			}
			set
			{
				if ((this._PerfilId != value))
				{
					this.OnPerfilIdChanging(value);
					this.SendPropertyChanging();
					this._PerfilId = value;
					this.SendPropertyChanged("PerfilId");
					this.OnPerfilIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerfilDescripcion", DbType="NChar(10)")]
		public string PerfilDescripcion
		{
			get
			{
				return this._PerfilDescripcion;
			}
			set
			{
				if ((this._PerfilDescripcion != value))
				{
					this.OnPerfilDescripcionChanging(value);
					this.SendPropertyChanging();
					this._PerfilDescripcion = value;
					this.SendPropertyChanged("PerfilDescripcion");
					this.OnPerfilDescripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PerfilHabilitado", DbType="Bit")]
		public System.Nullable<bool> PerfilHabilitado
		{
			get
			{
				return this._PerfilHabilitado;
			}
			set
			{
				if ((this._PerfilHabilitado != value))
				{
					this.OnPerfilHabilitadoChanging(value);
					this.SendPropertyChanging();
					this._PerfilHabilitado = value;
					this.SendPropertyChanged("PerfilHabilitado");
					this.OnPerfilHabilitadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Perfil_Usuario", Storage="_Usuario", ThisKey="PerfilId", OtherKey="IDPerfil")]
		public EntitySet<Usuario> Usuario
		{
			get
			{
				return this._Usuario;
			}
			set
			{
				this._Usuario.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Usuario(Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Perfil = this;
		}
		
		private void detach_Usuario(Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Perfil = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlanObraSocial")]
	public partial class PlanObraSocial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlanId;
		
		private string _PlanDescripcion;
		
		private int _IDObraSocial;
		
		private EntitySet<Afiliado> _Afiliado;
		
		private EntityRef<ObraSocial> _ObraSocial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlanIdChanging(int value);
    partial void OnPlanIdChanged();
    partial void OnPlanDescripcionChanging(string value);
    partial void OnPlanDescripcionChanged();
    partial void OnIDObraSocialChanging(int value);
    partial void OnIDObraSocialChanged();
    #endregion
		
		public PlanObraSocial()
		{
			this._Afiliado = new EntitySet<Afiliado>(new Action<Afiliado>(this.attach_Afiliado), new Action<Afiliado>(this.detach_Afiliado));
			this._ObraSocial = default(EntityRef<ObraSocial>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PlanId
		{
			get
			{
				return this._PlanId;
			}
			set
			{
				if ((this._PlanId != value))
				{
					this.OnPlanIdChanging(value);
					this.SendPropertyChanging();
					this._PlanId = value;
					this.SendPropertyChanged("PlanId");
					this.OnPlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanDescripcion", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string PlanDescripcion
		{
			get
			{
				return this._PlanDescripcion;
			}
			set
			{
				if ((this._PlanDescripcion != value))
				{
					this.OnPlanDescripcionChanging(value);
					this.SendPropertyChanging();
					this._PlanDescripcion = value;
					this.SendPropertyChanged("PlanDescripcion");
					this.OnPlanDescripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDObraSocial", DbType="Int NOT NULL")]
		public int IDObraSocial
		{
			get
			{
				return this._IDObraSocial;
			}
			set
			{
				if ((this._IDObraSocial != value))
				{
					if (this._ObraSocial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDObraSocialChanging(value);
					this.SendPropertyChanging();
					this._IDObraSocial = value;
					this.SendPropertyChanged("IDObraSocial");
					this.OnIDObraSocialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlanObraSocial_Afiliado", Storage="_Afiliado", ThisKey="PlanId", OtherKey="IDPlan")]
		public EntitySet<Afiliado> Afiliado
		{
			get
			{
				return this._Afiliado;
			}
			set
			{
				this._Afiliado.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObraSocial_PlanObraSocial", Storage="_ObraSocial", ThisKey="IDObraSocial", OtherKey="ObraSocialId", IsForeignKey=true)]
		public ObraSocial ObraSocial
		{
			get
			{
				return this._ObraSocial.Entity;
			}
			set
			{
				ObraSocial previousValue = this._ObraSocial.Entity;
				if (((previousValue != value) 
							|| (this._ObraSocial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObraSocial.Entity = null;
						previousValue.PlanObraSocial.Remove(this);
					}
					this._ObraSocial.Entity = value;
					if ((value != null))
					{
						value.PlanObraSocial.Add(this);
						this._IDObraSocial = value.ObraSocialId;
					}
					else
					{
						this._IDObraSocial = default(int);
					}
					this.SendPropertyChanged("ObraSocial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Afiliado(Afiliado entity)
		{
			this.SendPropertyChanging();
			entity.PlanObraSocial = this;
		}
		
		private void detach_Afiliado(Afiliado entity)
		{
			this.SendPropertyChanging();
			entity.PlanObraSocial = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Provincia")]
	public partial class Provincia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProvinciaId;
		
		private string _ProvinciaDescripcion;
		
		private EntitySet<Localidad> _Localidad;
		
		private EntitySet<Turno> _Turno;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinciaIdChanging(int value);
    partial void OnProvinciaIdChanged();
    partial void OnProvinciaDescripcionChanging(string value);
    partial void OnProvinciaDescripcionChanged();
    #endregion
		
		public Provincia()
		{
			this._Localidad = new EntitySet<Localidad>(new Action<Localidad>(this.attach_Localidad), new Action<Localidad>(this.detach_Localidad));
			this._Turno = new EntitySet<Turno>(new Action<Turno>(this.attach_Turno), new Action<Turno>(this.detach_Turno));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinciaId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProvinciaId
		{
			get
			{
				return this._ProvinciaId;
			}
			set
			{
				if ((this._ProvinciaId != value))
				{
					this.OnProvinciaIdChanging(value);
					this.SendPropertyChanging();
					this._ProvinciaId = value;
					this.SendPropertyChanged("ProvinciaId");
					this.OnProvinciaIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinciaDescripcion", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProvinciaDescripcion
		{
			get
			{
				return this._ProvinciaDescripcion;
			}
			set
			{
				if ((this._ProvinciaDescripcion != value))
				{
					this.OnProvinciaDescripcionChanging(value);
					this.SendPropertyChanging();
					this._ProvinciaDescripcion = value;
					this.SendPropertyChanged("ProvinciaDescripcion");
					this.OnProvinciaDescripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provincia_Localidad", Storage="_Localidad", ThisKey="ProvinciaId", OtherKey="IDProvincia")]
		public EntitySet<Localidad> Localidad
		{
			get
			{
				return this._Localidad;
			}
			set
			{
				this._Localidad.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provincia_Turno", Storage="_Turno", ThisKey="ProvinciaId", OtherKey="IDProvincia")]
		public EntitySet<Turno> Turno
		{
			get
			{
				return this._Turno;
			}
			set
			{
				this._Turno.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Localidad(Localidad entity)
		{
			this.SendPropertyChanging();
			entity.Provincia = this;
		}
		
		private void detach_Localidad(Localidad entity)
		{
			this.SendPropertyChanging();
			entity.Provincia = null;
		}
		
		private void attach_Turno(Turno entity)
		{
			this.SendPropertyChanging();
			entity.Provincia = this;
		}
		
		private void detach_Turno(Turno entity)
		{
			this.SendPropertyChanging();
			entity.Provincia = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServidorMail")]
	public partial class ServidorMail
	{
		
		private int _ID;
		
		private string _Mail;
		
		private string _Pass;
		
		public ServidorMail()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this._Mail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this._Pass = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sucursal")]
	public partial class Sucursal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SucursalId;
		
		private string _SucursalDescripcion;
		
		private int _IDLocalidad;
		
		private EntitySet<DisponibilidadMedico> _DisponibilidadMedico;
		
		private EntitySet<MedicoSucursal> _MedicoSucursal;
		
		private EntitySet<Turno> _Turno;
		
		private EntityRef<Localidad> _Localidad;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSucursalIdChanging(int value);
    partial void OnSucursalIdChanged();
    partial void OnSucursalDescripcionChanging(string value);
    partial void OnSucursalDescripcionChanged();
    partial void OnIDLocalidadChanging(int value);
    partial void OnIDLocalidadChanged();
    #endregion
		
		public Sucursal()
		{
			this._DisponibilidadMedico = new EntitySet<DisponibilidadMedico>(new Action<DisponibilidadMedico>(this.attach_DisponibilidadMedico), new Action<DisponibilidadMedico>(this.detach_DisponibilidadMedico));
			this._MedicoSucursal = new EntitySet<MedicoSucursal>(new Action<MedicoSucursal>(this.attach_MedicoSucursal), new Action<MedicoSucursal>(this.detach_MedicoSucursal));
			this._Turno = new EntitySet<Turno>(new Action<Turno>(this.attach_Turno), new Action<Turno>(this.detach_Turno));
			this._Localidad = default(EntityRef<Localidad>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SucursalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SucursalId
		{
			get
			{
				return this._SucursalId;
			}
			set
			{
				if ((this._SucursalId != value))
				{
					this.OnSucursalIdChanging(value);
					this.SendPropertyChanging();
					this._SucursalId = value;
					this.SendPropertyChanged("SucursalId");
					this.OnSucursalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SucursalDescripcion", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SucursalDescripcion
		{
			get
			{
				return this._SucursalDescripcion;
			}
			set
			{
				if ((this._SucursalDescripcion != value))
				{
					this.OnSucursalDescripcionChanging(value);
					this.SendPropertyChanging();
					this._SucursalDescripcion = value;
					this.SendPropertyChanged("SucursalDescripcion");
					this.OnSucursalDescripcionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLocalidad", DbType="Int NOT NULL")]
		public int IDLocalidad
		{
			get
			{
				return this._IDLocalidad;
			}
			set
			{
				if ((this._IDLocalidad != value))
				{
					if (this._Localidad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLocalidadChanging(value);
					this.SendPropertyChanging();
					this._IDLocalidad = value;
					this.SendPropertyChanged("IDLocalidad");
					this.OnIDLocalidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sucursal_DisponibilidadMedico", Storage="_DisponibilidadMedico", ThisKey="SucursalId", OtherKey="IDSucursal")]
		public EntitySet<DisponibilidadMedico> DisponibilidadMedico
		{
			get
			{
				return this._DisponibilidadMedico;
			}
			set
			{
				this._DisponibilidadMedico.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sucursal_MedicoSucursal", Storage="_MedicoSucursal", ThisKey="SucursalId", OtherKey="IDSucursal")]
		public EntitySet<MedicoSucursal> MedicoSucursal
		{
			get
			{
				return this._MedicoSucursal;
			}
			set
			{
				this._MedicoSucursal.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sucursal_Turno", Storage="_Turno", ThisKey="SucursalId", OtherKey="IDSucursal")]
		public EntitySet<Turno> Turno
		{
			get
			{
				return this._Turno;
			}
			set
			{
				this._Turno.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localidad_Sucursal", Storage="_Localidad", ThisKey="IDLocalidad", OtherKey="LocalidadId", IsForeignKey=true)]
		public Localidad Localidad
		{
			get
			{
				return this._Localidad.Entity;
			}
			set
			{
				Localidad previousValue = this._Localidad.Entity;
				if (((previousValue != value) 
							|| (this._Localidad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Localidad.Entity = null;
						previousValue.Sucursal.Remove(this);
					}
					this._Localidad.Entity = value;
					if ((value != null))
					{
						value.Sucursal.Add(this);
						this._IDLocalidad = value.LocalidadId;
					}
					else
					{
						this._IDLocalidad = default(int);
					}
					this.SendPropertyChanged("Localidad");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DisponibilidadMedico(DisponibilidadMedico entity)
		{
			this.SendPropertyChanging();
			entity.Sucursal = this;
		}
		
		private void detach_DisponibilidadMedico(DisponibilidadMedico entity)
		{
			this.SendPropertyChanging();
			entity.Sucursal = null;
		}
		
		private void attach_MedicoSucursal(MedicoSucursal entity)
		{
			this.SendPropertyChanging();
			entity.Sucursal = this;
		}
		
		private void detach_MedicoSucursal(MedicoSucursal entity)
		{
			this.SendPropertyChanging();
			entity.Sucursal = null;
		}
		
		private void attach_Turno(Turno entity)
		{
			this.SendPropertyChanging();
			entity.Sucursal = this;
		}
		
		private void detach_Turno(Turno entity)
		{
			this.SendPropertyChanging();
			entity.Sucursal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Turno")]
	public partial class Turno : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TurnoId;
		
		private int _IDFechaTurno;
		
		private int _IDMedico;
		
		private int _IDEspecialidad;
		
		private int _IDProvincia;
		
		private int _IDLocalidad;
		
		private int _IDSucursal;
		
		private int _IDUsuario;
		
		private EntityRef<FechaTurno> _FechaTurno;
		
		private EntityRef<Localidad> _Localidad;
		
		private EntityRef<Usuario> _Usuario;
		
		private EntityRef<Provincia> _Provincia;
		
		private EntityRef<Sucursal> _Sucursal;
		
		private EntityRef<Usuario> _Usuario1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTurnoIdChanging(int value);
    partial void OnTurnoIdChanged();
    partial void OnIDFechaTurnoChanging(int value);
    partial void OnIDFechaTurnoChanged();
    partial void OnIDMedicoChanging(int value);
    partial void OnIDMedicoChanged();
    partial void OnIDEspecialidadChanging(int value);
    partial void OnIDEspecialidadChanged();
    partial void OnIDProvinciaChanging(int value);
    partial void OnIDProvinciaChanged();
    partial void OnIDLocalidadChanging(int value);
    partial void OnIDLocalidadChanged();
    partial void OnIDSucursalChanging(int value);
    partial void OnIDSucursalChanged();
    partial void OnIDUsuarioChanging(int value);
    partial void OnIDUsuarioChanged();
    #endregion
		
		public Turno()
		{
			this._FechaTurno = default(EntityRef<FechaTurno>);
			this._Localidad = default(EntityRef<Localidad>);
			this._Usuario = default(EntityRef<Usuario>);
			this._Provincia = default(EntityRef<Provincia>);
			this._Sucursal = default(EntityRef<Sucursal>);
			this._Usuario1 = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TurnoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TurnoId
		{
			get
			{
				return this._TurnoId;
			}
			set
			{
				if ((this._TurnoId != value))
				{
					this.OnTurnoIdChanging(value);
					this.SendPropertyChanging();
					this._TurnoId = value;
					this.SendPropertyChanged("TurnoId");
					this.OnTurnoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDFechaTurno", DbType="Int NOT NULL")]
		public int IDFechaTurno
		{
			get
			{
				return this._IDFechaTurno;
			}
			set
			{
				if ((this._IDFechaTurno != value))
				{
					if (this._FechaTurno.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDFechaTurnoChanging(value);
					this.SendPropertyChanging();
					this._IDFechaTurno = value;
					this.SendPropertyChanged("IDFechaTurno");
					this.OnIDFechaTurnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMedico", DbType="Int NOT NULL")]
		public int IDMedico
		{
			get
			{
				return this._IDMedico;
			}
			set
			{
				if ((this._IDMedico != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDMedicoChanging(value);
					this.SendPropertyChanging();
					this._IDMedico = value;
					this.SendPropertyChanged("IDMedico");
					this.OnIDMedicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEspecialidad", DbType="Int NOT NULL")]
		public int IDEspecialidad
		{
			get
			{
				return this._IDEspecialidad;
			}
			set
			{
				if ((this._IDEspecialidad != value))
				{
					this.OnIDEspecialidadChanging(value);
					this.SendPropertyChanging();
					this._IDEspecialidad = value;
					this.SendPropertyChanged("IDEspecialidad");
					this.OnIDEspecialidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProvincia", DbType="Int NOT NULL")]
		public int IDProvincia
		{
			get
			{
				return this._IDProvincia;
			}
			set
			{
				if ((this._IDProvincia != value))
				{
					if (this._Provincia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDProvinciaChanging(value);
					this.SendPropertyChanging();
					this._IDProvincia = value;
					this.SendPropertyChanged("IDProvincia");
					this.OnIDProvinciaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLocalidad", DbType="Int NOT NULL")]
		public int IDLocalidad
		{
			get
			{
				return this._IDLocalidad;
			}
			set
			{
				if ((this._IDLocalidad != value))
				{
					if (this._Localidad.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDLocalidadChanging(value);
					this.SendPropertyChanging();
					this._IDLocalidad = value;
					this.SendPropertyChanged("IDLocalidad");
					this.OnIDLocalidadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSucursal", DbType="Int NOT NULL")]
		public int IDSucursal
		{
			get
			{
				return this._IDSucursal;
			}
			set
			{
				if ((this._IDSucursal != value))
				{
					if (this._Sucursal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDSucursalChanging(value);
					this.SendPropertyChanging();
					this._IDSucursal = value;
					this.SendPropertyChanged("IDSucursal");
					this.OnIDSucursalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDUsuario", DbType="Int NOT NULL")]
		public int IDUsuario
		{
			get
			{
				return this._IDUsuario;
			}
			set
			{
				if ((this._IDUsuario != value))
				{
					if (this._Usuario1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDUsuarioChanging(value);
					this.SendPropertyChanging();
					this._IDUsuario = value;
					this.SendPropertyChanged("IDUsuario");
					this.OnIDUsuarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FechaTurno_Turno", Storage="_FechaTurno", ThisKey="IDFechaTurno", OtherKey="FechaTurnoID", IsForeignKey=true)]
		public FechaTurno FechaTurno
		{
			get
			{
				return this._FechaTurno.Entity;
			}
			set
			{
				FechaTurno previousValue = this._FechaTurno.Entity;
				if (((previousValue != value) 
							|| (this._FechaTurno.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FechaTurno.Entity = null;
						previousValue.Turno.Remove(this);
					}
					this._FechaTurno.Entity = value;
					if ((value != null))
					{
						value.Turno.Add(this);
						this._IDFechaTurno = value.FechaTurnoID;
					}
					else
					{
						this._IDFechaTurno = default(int);
					}
					this.SendPropertyChanged("FechaTurno");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Localidad_Turno", Storage="_Localidad", ThisKey="IDLocalidad", OtherKey="LocalidadId", IsForeignKey=true)]
		public Localidad Localidad
		{
			get
			{
				return this._Localidad.Entity;
			}
			set
			{
				Localidad previousValue = this._Localidad.Entity;
				if (((previousValue != value) 
							|| (this._Localidad.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Localidad.Entity = null;
						previousValue.Turno.Remove(this);
					}
					this._Localidad.Entity = value;
					if ((value != null))
					{
						value.Turno.Add(this);
						this._IDLocalidad = value.LocalidadId;
					}
					else
					{
						this._IDLocalidad = default(int);
					}
					this.SendPropertyChanged("Localidad");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_Turno", Storage="_Usuario", ThisKey="IDMedico", OtherKey="UsuarioID", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Turno.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Turno.Add(this);
						this._IDMedico = value.UsuarioID;
					}
					else
					{
						this._IDMedico = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provincia_Turno", Storage="_Provincia", ThisKey="IDProvincia", OtherKey="ProvinciaId", IsForeignKey=true)]
		public Provincia Provincia
		{
			get
			{
				return this._Provincia.Entity;
			}
			set
			{
				Provincia previousValue = this._Provincia.Entity;
				if (((previousValue != value) 
							|| (this._Provincia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Provincia.Entity = null;
						previousValue.Turno.Remove(this);
					}
					this._Provincia.Entity = value;
					if ((value != null))
					{
						value.Turno.Add(this);
						this._IDProvincia = value.ProvinciaId;
					}
					else
					{
						this._IDProvincia = default(int);
					}
					this.SendPropertyChanged("Provincia");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sucursal_Turno", Storage="_Sucursal", ThisKey="IDSucursal", OtherKey="SucursalId", IsForeignKey=true)]
		public Sucursal Sucursal
		{
			get
			{
				return this._Sucursal.Entity;
			}
			set
			{
				Sucursal previousValue = this._Sucursal.Entity;
				if (((previousValue != value) 
							|| (this._Sucursal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sucursal.Entity = null;
						previousValue.Turno.Remove(this);
					}
					this._Sucursal.Entity = value;
					if ((value != null))
					{
						value.Turno.Add(this);
						this._IDSucursal = value.SucursalId;
					}
					else
					{
						this._IDSucursal = default(int);
					}
					this.SendPropertyChanged("Sucursal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_Turno1", Storage="_Usuario1", ThisKey="IDUsuario", OtherKey="UsuarioID", IsForeignKey=true)]
		public Usuario Usuario1
		{
			get
			{
				return this._Usuario1.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario1.Entity;
				if (((previousValue != value) 
							|| (this._Usuario1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario1.Entity = null;
						previousValue.Turno1.Remove(this);
					}
					this._Usuario1.Entity = value;
					if ((value != null))
					{
						value.Turno1.Add(this);
						this._IDUsuario = value.UsuarioID;
					}
					else
					{
						this._IDUsuario = default(int);
					}
					this.SendPropertyChanged("Usuario1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
